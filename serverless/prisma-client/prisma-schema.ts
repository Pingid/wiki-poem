// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateWikicongaLoop {
  count: Int!
}

type AggregateWikicongaNode {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createWikicongaLoop(data: WikicongaLoopCreateInput!): WikicongaLoop!
  updateWikicongaLoop(data: WikicongaLoopUpdateInput!, where: WikicongaLoopWhereUniqueInput!): WikicongaLoop
  upsertWikicongaLoop(where: WikicongaLoopWhereUniqueInput!, create: WikicongaLoopCreateInput!, update: WikicongaLoopUpdateInput!): WikicongaLoop!
  deleteWikicongaLoop(where: WikicongaLoopWhereUniqueInput!): WikicongaLoop
  deleteManyWikicongaLoops(where: WikicongaLoopWhereInput): BatchPayload!
  createWikicongaNode(data: WikicongaNodeCreateInput!): WikicongaNode!
  updateWikicongaNode(data: WikicongaNodeUpdateInput!, where: WikicongaNodeWhereUniqueInput!): WikicongaNode
  updateManyWikicongaNodes(data: WikicongaNodeUpdateManyMutationInput!, where: WikicongaNodeWhereInput): BatchPayload!
  upsertWikicongaNode(where: WikicongaNodeWhereUniqueInput!, create: WikicongaNodeCreateInput!, update: WikicongaNodeUpdateInput!): WikicongaNode!
  deleteWikicongaNode(where: WikicongaNodeWhereUniqueInput!): WikicongaNode
  deleteManyWikicongaNodes(where: WikicongaNodeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  wikicongaLoop(where: WikicongaLoopWhereUniqueInput!): WikicongaLoop
  wikicongaLoops(where: WikicongaLoopWhereInput, orderBy: WikicongaLoopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WikicongaLoop]!
  wikicongaLoopsConnection(where: WikicongaLoopWhereInput, orderBy: WikicongaLoopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WikicongaLoopConnection!
  wikicongaNode(where: WikicongaNodeWhereUniqueInput!): WikicongaNode
  wikicongaNodes(where: WikicongaNodeWhereInput, orderBy: WikicongaNodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WikicongaNode]!
  wikicongaNodesConnection(where: WikicongaNodeWhereInput, orderBy: WikicongaNodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WikicongaNodeConnection!
  node(id: ID!): Node
}

type Subscription {
  wikicongaLoop(where: WikicongaLoopSubscriptionWhereInput): WikicongaLoopSubscriptionPayload
  wikicongaNode(where: WikicongaNodeSubscriptionWhereInput): WikicongaNodeSubscriptionPayload
}

type WikicongaLoop {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startNode: WikicongaNode!
}

type WikicongaLoopConnection {
  pageInfo: PageInfo!
  edges: [WikicongaLoopEdge]!
  aggregate: AggregateWikicongaLoop!
}

input WikicongaLoopCreateInput {
  startNode: WikicongaNodeCreateOneInput!
}

type WikicongaLoopEdge {
  node: WikicongaLoop!
  cursor: String!
}

enum WikicongaLoopOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WikicongaLoopPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WikicongaLoopSubscriptionPayload {
  mutation: MutationType!
  node: WikicongaLoop
  updatedFields: [String!]
  previousValues: WikicongaLoopPreviousValues
}

input WikicongaLoopSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WikicongaLoopWhereInput
  AND: [WikicongaLoopSubscriptionWhereInput!]
  OR: [WikicongaLoopSubscriptionWhereInput!]
  NOT: [WikicongaLoopSubscriptionWhereInput!]
}

input WikicongaLoopUpdateInput {
  startNode: WikicongaNodeUpdateOneRequiredInput
}

input WikicongaLoopWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  startNode: WikicongaNodeWhereInput
  AND: [WikicongaLoopWhereInput!]
  OR: [WikicongaLoopWhereInput!]
  NOT: [WikicongaLoopWhereInput!]
}

input WikicongaLoopWhereUniqueInput {
  id: ID
}

type WikicongaNode {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  url: String!
  text: String!
  children(where: WikicongaNodeWhereInput, orderBy: WikicongaNodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WikicongaNode!]
}

type WikicongaNodeConnection {
  pageInfo: PageInfo!
  edges: [WikicongaNodeEdge]!
  aggregate: AggregateWikicongaNode!
}

input WikicongaNodeCreateInput {
  title: String!
  url: String!
  text: String!
  children: WikicongaNodeCreateManyInput
}

input WikicongaNodeCreateManyInput {
  create: [WikicongaNodeCreateInput!]
  connect: [WikicongaNodeWhereUniqueInput!]
}

input WikicongaNodeCreateOneInput {
  create: WikicongaNodeCreateInput
  connect: WikicongaNodeWhereUniqueInput
}

type WikicongaNodeEdge {
  node: WikicongaNode!
  cursor: String!
}

enum WikicongaNodeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
  text_ASC
  text_DESC
}

type WikicongaNodePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  url: String!
  text: String!
}

input WikicongaNodeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [WikicongaNodeScalarWhereInput!]
  OR: [WikicongaNodeScalarWhereInput!]
  NOT: [WikicongaNodeScalarWhereInput!]
}

type WikicongaNodeSubscriptionPayload {
  mutation: MutationType!
  node: WikicongaNode
  updatedFields: [String!]
  previousValues: WikicongaNodePreviousValues
}

input WikicongaNodeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WikicongaNodeWhereInput
  AND: [WikicongaNodeSubscriptionWhereInput!]
  OR: [WikicongaNodeSubscriptionWhereInput!]
  NOT: [WikicongaNodeSubscriptionWhereInput!]
}

input WikicongaNodeUpdateDataInput {
  title: String
  url: String
  text: String
  children: WikicongaNodeUpdateManyInput
}

input WikicongaNodeUpdateInput {
  title: String
  url: String
  text: String
  children: WikicongaNodeUpdateManyInput
}

input WikicongaNodeUpdateManyDataInput {
  title: String
  url: String
  text: String
}

input WikicongaNodeUpdateManyInput {
  create: [WikicongaNodeCreateInput!]
  update: [WikicongaNodeUpdateWithWhereUniqueNestedInput!]
  upsert: [WikicongaNodeUpsertWithWhereUniqueNestedInput!]
  delete: [WikicongaNodeWhereUniqueInput!]
  connect: [WikicongaNodeWhereUniqueInput!]
  set: [WikicongaNodeWhereUniqueInput!]
  disconnect: [WikicongaNodeWhereUniqueInput!]
  deleteMany: [WikicongaNodeScalarWhereInput!]
  updateMany: [WikicongaNodeUpdateManyWithWhereNestedInput!]
}

input WikicongaNodeUpdateManyMutationInput {
  title: String
  url: String
  text: String
}

input WikicongaNodeUpdateManyWithWhereNestedInput {
  where: WikicongaNodeScalarWhereInput!
  data: WikicongaNodeUpdateManyDataInput!
}

input WikicongaNodeUpdateOneRequiredInput {
  create: WikicongaNodeCreateInput
  update: WikicongaNodeUpdateDataInput
  upsert: WikicongaNodeUpsertNestedInput
  connect: WikicongaNodeWhereUniqueInput
}

input WikicongaNodeUpdateWithWhereUniqueNestedInput {
  where: WikicongaNodeWhereUniqueInput!
  data: WikicongaNodeUpdateDataInput!
}

input WikicongaNodeUpsertNestedInput {
  update: WikicongaNodeUpdateDataInput!
  create: WikicongaNodeCreateInput!
}

input WikicongaNodeUpsertWithWhereUniqueNestedInput {
  where: WikicongaNodeWhereUniqueInput!
  update: WikicongaNodeUpdateDataInput!
  create: WikicongaNodeCreateInput!
}

input WikicongaNodeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  children_every: WikicongaNodeWhereInput
  children_some: WikicongaNodeWhereInput
  children_none: WikicongaNodeWhereInput
  AND: [WikicongaNodeWhereInput!]
  OR: [WikicongaNodeWhereInput!]
  NOT: [WikicongaNodeWhereInput!]
}

input WikicongaNodeWhereUniqueInput {
  id: ID
  url: String
}
`